<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <title>1.3 Detector de Pokémon</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      margin: 20px;
    }
    #preview {
      max-width: 200px;
      margin-top: 10px;
      border: 2px solid #ddd;
      border-radius: 8px;
      display: none;
    }
    #label-container {
      margin-top: 20px;
      font-size: 16px;
    }
    button, input[type="file"] {
      margin: 10px;
      padding: 10px 15px;
      font-size: 16px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <h2>Detector de Pokémon (Pikachu vs Charmander)</h2>

  <div>
    <button type="button" onclick="initWebcam()">Abrir Câmera</button>
    <input type="file" accept="image/*" onchange="showPreview(event)">
    <button onclick="analisarImagem()">Analisar Imagem</button>
  </div>

  <div id="webcam-container"></div>
  <img id="preview" alt="Prévia da imagem escolhida" />

  <div id="label-container"></div>

  <!-- Scripts do Teachable Machine -->
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@latest/dist/teachablemachine-image.min.js"></script>

  <script>
    // Caminho do modelo (ajuste se necessário)
    const URL = "./my_model/";

    let model, webcam, labelContainer, maxPredictions;
    let imagemSelecionada = null;

    // Carrega o modelo
    async function loadModel() {
      if (model) return model; // já carregado
      const modelURL = URL + "model.json";
      const metadataURL = URL + "metadata.json";
      try {
        model = await tmImage.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();
        labelContainer = document.getElementById("label-container");
        return model;
      } catch (err) {
        alert("⚠️ Erro ao carregar o modelo. Verifique se a pasta 'my_model' está no lugar certo.");
        console.error(err);
      }
    }

    // Inicia a webcam
    async function initWebcam() {
      await loadModel();
      const flip = true;
      webcam = new tmImage.Webcam(200, 200, flip);
      await webcam.setup();
      await webcam.play();
      window.requestAnimationFrame(loop);
      document.getElementById("webcam-container").innerHTML = "";
      document.getElementById("webcam-container").appendChild(webcam.canvas);
    }

    async function loop() {
      webcam.update();
      await predict(webcam.canvas);
      window.requestAnimationFrame(loop);
    }

    // Predição genérica (webcam ou imagem)
    async function predict(input) {
      if (!model) return;
      const prediction = await model.predict(input);

      // limpa resultados
      labelContainer.innerHTML = "";

      // acha melhor resultado
      let best = prediction[0];
      for (let i = 1; i < prediction.length; i++) {
        if (prediction[i].probability > best.probability) {
          best = prediction[i];
        }
      }

      // mostra resultado principal
      const resultText = document.createElement("div");
      resultText.style.fontSize = "20px";
      resultText.style.fontWeight = "bold";
      resultText.textContent =
        `Resultado: ${best.className} (${(best.probability * 100).toFixed(1)}%)`;
      labelContainer.appendChild(resultText);

      // mostra todas probabilidades
      prediction.forEach(p => {
        const classPrediction = document.createElement("div");
        classPrediction.textContent =
          `${p.className}: ${(p.probability * 100).toFixed(1)}%`;
        labelContainer.appendChild(classPrediction);
      });
    }

    // Mostra preview da imagem e só define como selecionada após carregar
    function showPreview(event) {
      const file = event.target.files[0];
      if (!file) {
        alert("⚠️ Nenhuma imagem selecionada.");
        return;
      }
      const img = document.getElementById("preview");
      img.src = URL.createObjectURL(file);
      img.style.display = "block";

      img.onload = () => {
        imagemSelecionada = img; // só depois que a imagem carregou
        console.log("Imagem carregada e pronta para análise");
      };
    }

    // Só analisa depois de clicar no botão
    async function analisarImagem() {
      if (!imagemSelecionada) {
        alert("⚠️ Escolha uma imagem primeiro.");
        return;
      }
      await loadModel();
      await predict(imagemSelecionada);
    }
  </script>
</body>
</html>
