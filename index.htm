<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <title>2 Detector de Pok√©mon (Pikachu x Charmander) v2</title>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@latest/dist/teachablemachine-image.min.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      background: #f0f0f0;
    }
    #controls {
      margin: 20px;
    }
    #result {
      margin-top: 15px;
      font-size: 1.3em;
      font-weight: bold;
    }
    #error {
      margin-top: 15px;
      font-size: 1em;
      font-weight: bold;
      color: red;
    }
    #preview, #webcam-container canvas, #snapshot {
      margin-top: 15px;
      border: 2px solid #333;
      border-radius: 10px;
    }
  </style>
</head>
<body>
  <h1>Detector de Pok√©mon</h1>
  <p>Suba uma imagem ou use a c√¢mera para identificar Pikachu, Charmander ou Outro Pok√©mon.</p>

  <div id="controls">
    <input type="file" id="imageUpload" accept="image/*">
    <br><br>
    <button onclick="initWebcam()">Abrir C√¢mera (tempo real)</button>
    <button onclick="stopWebcam()">Fechar C√¢mera</button>
    <br><br>
    <button onclick="captureSnapshot()">üì∏ Tirar Foto</button>
  </div>

  <div id="preview-container">
    <img id="preview" width="200" style="display:none;">
    <canvas id="snapshot" width="200" height="200" style="display:none;"></canvas>
  </div>

  <div id="webcam-container"></div>
  <div id="result"></div>
  <div id="error"></div>
  <div id="label-container"></div>

  <script>
    const URL = "./my_model/"; // ajuste se precisar
    let model, webcam, labelContainer, maxPredictions, loopActive = false;

    // Fun√ß√£o auxiliar para mostrar erros
    function showError(message) {
      document.getElementById("error").innerText = "‚ö†Ô∏è " + message;
      console.error(message);
    }

    function clearError() {
      document.getElementById("error").innerText = "";
    }

    // carregar modelo
    async function loadModel() {
      try {
        if (!model) {
          const modelURL = URL + "model.json";
          const metadataURL = URL + "metadata.json";
          model = await tmImage.load(modelURL, metadataURL);
          maxPredictions = model.getTotalClasses();
          labelContainer = document.getElementById("label-container");
          labelContainer.innerHTML = "";
          for (let i = 0; i < maxPredictions; i++) {
            labelContainer.appendChild(document.createElement("div"));
          }
        }
      } catch (err) {
        showError("Erro ao carregar o modelo. Verifique se a pasta 'my_model' est√° no mesmo n√≠vel do index.html.");
      }
    }

    // Upload de imagem
    document.getElementById("imageUpload").addEventListener("change", async (event) => {
      clearError();
      const file = event.target.files[0];
      if (!file) {
        showError("Nenhuma imagem selecionada.");
        return;
      }

      await loadModel();
      if (!model) return; // n√£o carregou

      const img = document.getElementById("preview");
      img.src = URL.createObjectURL(file);
      img.style.display = "block";
      document.getElementById("snapshot").style.display = "none";

      img.onload = async () => {
        try {
          const prediction = await model.predict(img);
          showResults(prediction);
        } catch (err) {
          showError("Erro ao processar a imagem.");
        }
      };
    });

    // Webcam em tempo real
    async function initWebcam() {
      clearError();
      await loadModel();
      if (!model) return;

      try {
        loopActive = true;
        const flip = true;
        webcam = new tmImage.Webcam(200, 200, flip);
        await webcam.setup();
        await webcam.play();
        document.getElementById("webcam-container").innerHTML = "";
        document.getElementById("webcam-container").appendChild(webcam.canvas);
        window.requestAnimationFrame(loop);
      } catch (err) {
        showError("Erro ao acessar a c√¢mera. Verifique as permiss√µes.");
      }
    }

    async function loop() {
      if (!loopActive) return;
      webcam.update();
      try {
        const prediction = await model.predict(webcam.canvas);
        showResults(prediction);
      } catch (err) {
        showError("Erro ao processar a c√¢mera.");
      }
      window.requestAnimationFrame(loop);
    }

    function stopWebcam() {
      if (webcam) {
        loopActive = false;
        webcam.stop();
        document.getElementById("webcam-container").innerHTML = "";
      }
    }

    // Tirar uma foto da c√¢mera
    async function captureSnapshot() {
      clearError();
      if (!webcam) {
        showError("Primeiro abra a c√¢mera!");
        return;
      }
      stopWebcam();
      const snapshotCanvas = document.getElementById("snapshot");
      const ctx = snapshotCanvas.getContext("2d");
      ctx.drawImage(webcam.canvas, 0, 0, 200, 200);
      snapshotCanvas.style.display = "block";
      document.getElementById("preview").style.display = "none";

      try {
        const prediction = await model.predict(snapshotCanvas);
        showResults(prediction);
      } catch (err) {
        showError("Erro ao analisar a foto da c√¢mera.");
      }
    }

    // Mostrar resultados
    function showResults(prediction) {
      clearError();
      let bestClass = prediction[0];
      for (let i = 1; i < prediction.length; i++) {
        if (prediction[i].probability > bestClass.probability) {
          bestClass = prediction[i];
        }
      }

      let resultText;
      if (bestClass.className.toLowerCase().includes("pikachu")) {
        resultText = "üîé Detectado: Pikachu ‚ö°";
      } else if (bestClass.className.toLowerCase().includes("charmander")) {
        resultText = "üîé Detectado: Charmander üî•";
      } else {
        resultText = "‚ùì Outro Pok√©mon";
      }

      document.getElementById("result").innerText = resultText;

      prediction.forEach((p, i) => {
        labelContainer.childNodes[i].innerHTML =
          `${p.className}: ${(p.probability * 100).toFixed(1)}%`;
      });
    }
  </script>
</body>
</html>


